# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

require 'set'

# Use master repo instead of CDN to avoid HTTP2 framing errors
source 'https://github.com/CocoaPods/Specs.git'

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Disable New Architecture to avoid llama-rn codegen issues
ENV['RCT_NEW_ARCH_ENABLED'] = '0'

# Use dynamic frameworks to avoid llama.rn conflicts
# Firebase 22+ works with dynamic linking
use_frameworks! :linkage => :dynamic


# Force static frameworks only for Firebase
$RNFirebaseAsStaticFramework = true

target 'antonioR' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Manual linking for disabled auto-link libraries
  pod 'llama-rn', :path => '../node_modules/llama.rn'
  pod 'ReactNativeOpenAI', :path => '../node_modules/react-native-openai'

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    
    # Fix for llama.rn and Firebase framework conflicts
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Disable CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES for all targets
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
        
        # Specific settings for llama-rn
        if target.name == 'llama-rn'
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '-std=c++20'
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
          # Use static library instead of framework to avoid header conflicts
          config.build_settings['MACH_O_TYPE'] = 'staticlib'
          config.build_settings['SKIP_INSTALL'] = 'YES'
        end
      end
      
      # Fix duplicate headers for llama-rn
      if target.name == 'llama-rn'
        target.build_phases.each do |build_phase|
          if build_phase.class == Xcodeproj::Project::Object::PBXHeadersBuildPhase
            seen_headers = Set.new
            build_phase.files.delete_if do |file|
              header_name = File.basename(file.file_ref.path)
              if seen_headers.include?(header_name)
                puts "Removing duplicate header: #{header_name}"
                true
              else
                seen_headers.add(header_name)
                false
              end
            end
          end
        end
      end
    end
  end
end
